/**
 * Simplified EasySlip API Integration
 * ‡πÉ‡∏ä‡πâ form-data ‡πÅ‡∏ó‡∏ô URL
 */

const EASYSLIP_API_URL = "https://developer.easyslip.com/api/v1/verify";

/**
 * Verify slip using EasySlip API with file upload
 * @param {File|Buffer} file - File object ‡∏´‡∏£‡∏∑‡∏≠ Buffer
 * @returns {Promise<Object>} Verification result
 */
export const verifySlipWithEasySlip = async (file) => {
  try {
    // Check if API key is configured
    if (!process.env.EASYSLIP_API_KEY) {
      console.error("‚ùå EasySlip API key not configured");
      return {
        success: false,
        error: "EasySlip API key not configured",
        provider: "easyslip"
      };
    }

    console.log("üîç Calling EasySlip API with file upload");

    // Validate input
    if (!file) {
      return {
        success: false,
        error: "File is required",
        provider: "easyslip"
      };
    }

    // Create FormData for file upload
    const formData = new FormData();
    
    // Handle different file types
    if (file instanceof File) {
      // Browser File object
      formData.append('file', file);
      console.log("üì§ Uploading browser File:", file.name, file.size);
    } else if (Buffer.isBuffer(file) || file instanceof Uint8Array) {
      // Server-side Buffer
      const blob = new Blob([file], { type: 'image/jpeg' });
      formData.append('file', blob, 'slip.jpg');
      console.log("üì§ Uploading buffer:", file.length, "bytes");
    } else if (file.arrayBuffer && typeof file.arrayBuffer === 'function') {
      // File-like object with arrayBuffer method
      const buffer = await file.arrayBuffer();
      const blob = new Blob([buffer], { type: file.type || 'image/jpeg' });
      formData.append('file', blob, file.name || 'slip.jpg');
      console.log("üì§ Uploading file-like object:", buffer.byteLength, "bytes");
    } else {
      return {
        success: false,
        error: "Unsupported file type",
        provider: "easyslip"
      };
    }

    const response = await fetch(EASYSLIP_API_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.EASYSLIP_API_KEY}`,
        // Don't set Content-Type header - let browser set it with boundary
      },
      body: formData,
      timeout: 30000, // 30 seconds timeout
    });

    const responseText = await response.text();
    console.log("üì° EasySlip Response Status:", response.status);
    console.log("üìÑ EasySlip Response:", responseText);

    if (!response.ok) {
      console.error("‚ùå EasySlip API Error:", response.status, responseText);
      
      // Parse error response if possible
      let errorMessage = `HTTP ${response.status}`;
      try {
        const errorJson = JSON.parse(responseText);
        errorMessage = errorJson.message || errorJson.error || errorMessage;
      } catch (parseError) {
        // Use raw text if JSON parsing fails
        errorMessage = responseText || errorMessage;
      }

      return {
        success: false,
        error: `EasySlip API error: ${errorMessage}`,
        provider: "easyslip",
        statusCode: response.status
      };
    }

    let result;
    try {
      result = JSON.parse(responseText);
    } catch (parseError) {
      console.error("‚ùå JSON parse error:", parseError);
      return {
        success: false,
        error: "Failed to parse EasySlip response",
        provider: "easyslip"
      };
    }

    console.log("‚úÖ EasySlip API Response:", result);

    // Check if the response indicates success
    if (result.status === 200 && result.data) {
      console.log("‚úÖ EasySlip verification successful");
      
      // Parse and normalize the data based on the new response format
      const data = result.data;
      const normalizedData = {
        amount: data.amount?.local?.amount || data.amount?.amount || null,
        transDate: data.date ? new Date(data.date).toISOString().split('T')[0] : null,
        transTime: data.date ? new Date(data.date).toTimeString().split(' ')[0] : null,
        sender: {
          account: data.sender?.account?.bank?.account || null,
          name: data.sender?.account?.name?.th || data.sender?.account?.name?.en || null,
          bank: data.sender?.bank?.short || data.sender?.bank?.name || null
        },
        receiver: {
          account: data.receiver?.account?.bank?.account || null,
          name: data.receiver?.account?.name?.th || data.receiver?.account?.name?.en || null,
          bank: data.receiver?.bank?.short || data.receiver?.bank?.name || null
        },
        ref: data.transRef || data.ref1 || data.ref2 || null,
        confidence: 1.0, // EasySlip usually has high confidence when successful
        // Keep original data for debugging
        raw: data
      };

      return {
        success: true,
        data: normalizedData,
        provider: "easyslip",
        message: "Slip verification successful"
      };
    } else {
      console.error("‚ùå EasySlip verification failed:", result);
      
      const errorMessage = result.message || result.error || "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slip ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      
      return {
        success: false,
        error: errorMessage,
        provider: "easyslip",
        statusCode: result.status || null,
        data: result.data || null
      };
    }

  } catch (error) {
    console.error("‚ùå EasySlip API Error:", error);
    
    // Handle different types of errors
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å EasySlip API";
    
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö EasySlip API ‡πÑ‡∏î‡πâ";
    } else if (error.name === 'AbortError') {
      errorMessage = "EasySlip API timeout";
    } else if (error.message) {
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage,
      provider: "easyslip",
      details: {
        name: error.name,
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      }
    };
  }
};

/**
 * Calculate confidence score based on slip verification result
 * @param {Object} verificationResult - Result from EasySlip
 * @param {Object} orderData - Order information to compare against
 * @returns {Object} Confidence calculation result
 */
export const calculateSlipConfidence = (verificationResult, orderData) => {
  if (!verificationResult.success || !verificationResult.data) {
    return {
      score: 0,
      details: {
        amount: { match: false, score: 0, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" },
        date: { match: false, score: 0, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ" },
        bank: { match: false, score: 0, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏î‡πâ" },
        account: { match: false, score: 0, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ" }
      },
      shouldAutoApprove: false,
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ"
    };
  }

  const slipData = verificationResult.data;
  let totalScore = 0;
  const details = {};

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (slipData.amount && orderData.total) {
    const amountDiff = Math.abs(slipData.amount - orderData.total);
    const tolerance = Math.max(1, orderData.total * 0.01); // 1 ‡∏ö‡∏≤‡∏ó ‡∏´‡∏£‡∏∑‡∏≠ 1%
    
    if (amountDiff <= tolerance) {
      details.amount = {
        match: true,
        score: 30,
        message: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ${slipData.amount} ‡∏ö‡∏≤‡∏ó`
      };
      totalScore += 30;
    } else {
      details.amount = {
        match: false,
        score: 0,
        message: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ‡∏™‡∏•‡∏¥‡∏õ ${slipData.amount} ‡∏ö‡∏≤‡∏ó, ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ${orderData.total} ‡∏ö‡∏≤‡∏ó`
      };
    }
  } else {
    details.amount = {
      match: false,
      score: 0,
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ"
    };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (25 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (slipData.transDate && orderData.createdAt) {
    try {
      const slipDate = new Date(slipData.transDate);
      const orderDate = new Date(orderData.createdAt);
      const daysDiff = Math.abs((slipDate - orderDate) / (1000 * 60 * 60 * 24));
      
      if (daysDiff <= 7) {
        const score = Math.max(10, 25 - (daysDiff * 2)); // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
        details.date = {
          match: true,
          score: score,
          message: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (${Math.round(daysDiff)} ‡∏ß‡∏±‡∏ô)`
        };
        totalScore += score;
      } else {
        details.date = {
          match: false,
          score: 0,
          message: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${Math.round(daysDiff)} ‡∏ß‡∏±‡∏ô)`
        };
      }
    } catch (dateError) {
      details.date = {
        match: false,
        score: 0,
        message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
      };
    }
  } else {
    details.date = {
      match: false,
      score: 0,
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ"
    };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (35 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  const expectedAccount = {
    number: "107-889-8751",
    name: "‡∏ô‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏©‡∏ê‡∏≤ ‡∏û‡∏ß‡∏á‡∏ö‡∏∏‡∏ö‡∏ú‡∏≤",
    bank: "KBANK" // ‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢
  };

  const accountVerification = verifyReceiverAccount(slipData, expectedAccount);
  details.account = accountVerification;
  totalScore += accountVerification.score;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (slipData.sender?.bank || slipData.receiver?.bank) {
    details.bank = {
      match: true,
      score: 10,
      message: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${slipData.sender?.bank || ''} -> ${slipData.receiver?.bank || ''}`
    };
    totalScore += 10;
  } else {
    details.bank = {
      match: false,
      score: 0,
      message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ"
    };
  }

  // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const shouldAutoApprove = totalScore >= 80 && details.account.match;

  return {
    score: totalScore,
    details,
    shouldAutoApprove,
    message: shouldAutoApprove 
      ? `‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (${totalScore}/100)`
      : `‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (${totalScore}/100)`
  };
};

/**
 * Verify receiver's bank account information
 * @param {Object} slipData - Data extracted from slip
 * @param {Object} expectedAccount - Expected account information
 * @returns {Object} Verification result
 */
export const verifyReceiverAccount = (slipData, expectedAccount) => {
  const receiver = slipData.receiver;
  
  if (!receiver) {
    return {
      match: false,
      score: 0,
      message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ"
    };
  }

  let score = 0;
  const checks = [];

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (receiver.account) {
    // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏µ‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const slipAccount = receiver.account.replace(/[-\s]/g, '');
    const expectedAccountNumber = expectedAccount.number.replace(/[-\s]/g, '');
    
    if (slipAccount === expectedAccountNumber) {
      score += 20;
      checks.push("‚úÖ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    } else {
      checks.push(`‚ùå ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ‡∏û‡∏ö ${receiver.account}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${expectedAccount.number}`);
    }
  } else {
    checks.push("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö");
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (receiver.name) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
    const slipName = receiver.name.toLowerCase().replace(/\s+/g, '');
    const expectedName = expectedAccount.name.toLowerCase().replace(/\s+/g, '');
    
    if (slipName.includes('‡πÄ‡∏ä‡∏©‡∏ê‡∏≤') || slipName.includes('‡∏û‡∏ß‡∏á‡∏ö‡∏∏‡∏ö‡∏ú‡∏≤') || 
        expectedName.includes(slipName) || slipName.includes(expectedName)) {
      score += 10;
      checks.push("‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
    } else {
      checks.push(`‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ‡∏û‡∏ö ${receiver.name}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${expectedAccount.name}`);
    }
  } else {
    checks.push("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö");
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  if (receiver.bank) {
    const bankCodes = ['KBANK', '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', '‡∏Å‡∏™‡∏¥‡∏Å‡∏£', 'KASIKORN'];
    const slipBank = receiver.bank.toUpperCase();
    
    if (bankCodes.some(code => slipBank.includes(code.toUpperCase()))) {
      score += 5;
      checks.push("‚úÖ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢)");
    } else {
      checks.push(`‚ùå ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏û‡∏ö ${receiver.bank}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢`);
    }
  } else {
    checks.push("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö");
  }

  return {
    match: score >= 30, // ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30/35 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    score: score,
    message: checks.join(', '),
    details: {
      found: {
        account: receiver.account || '‡πÑ‡∏°‡πà‡∏û‡∏ö',
        name: receiver.name || '‡πÑ‡∏°‡πà‡∏û‡∏ö',
        bank: receiver.bank || '‡πÑ‡∏°‡πà‡∏û‡∏ö'
      },
      expected: expectedAccount,
      checks: checks
    }
  };
};

/**
 * Check if account number matches expected receiver account
 * @param {string} accountNumber - Account number to check
 * @param {string} accountName - Account name to check (optional)
 * @returns {Object} Match result
 */
export const isExpectedReceiverAccount = (accountNumber, accountName = null) => {
  const expectedAccount = {
    number: "107-889-8751",
    name: "‡∏ô‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏©‡∏ê‡∏≤ ‡∏û‡∏ß‡∏á‡∏ö‡∏∏‡∏ö‡∏ú‡∏≤",
    bank: "‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢"
  };

  // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏µ‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  const cleanAccountNumber = accountNumber?.replace(/[-\s]/g, '') || '';
  const expectedCleanNumber = expectedAccount.number.replace(/[-\s]/g, '');

  const accountMatch = cleanAccountNumber === expectedCleanNumber;
  
  let nameMatch = true; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô
  if (accountName) {
    const cleanName = accountName.toLowerCase().replace(/\s+/g, '');
    nameMatch = cleanName.includes('‡πÄ‡∏ä‡∏©‡∏ê‡∏≤') || cleanName.includes('‡∏û‡∏ß‡∏á‡∏ö‡∏∏‡∏ö‡∏ú‡∏≤');
  }

  return {
    isValid: accountMatch && nameMatch,
    accountMatch,
    nameMatch,
    expected: expectedAccount,
    message: accountMatch && nameMatch 
      ? "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" 
      : !accountMatch 
        ? `‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${expectedAccount.number}`
        : "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
  };
};